{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/blog.service.ts","webpack:///src/app/edit/edit.component.ts","webpack:///src/app/edit/edit.component.html","webpack:///src/app/list/list.component.ts","webpack:///src/app/list/list.component.html","webpack:///src/app/preview/preview.component.ts","webpack:///src/app/preview/preview.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","useHash","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","Post","BlogService","http","document","cookie","alert","currentUser","parseJWT","err","console","log","message","reject","String","status","token","base64Url","split","base64","replace","obj","JSON","parse","atob","usr","username","url","get","toPromise","handleError","postid","post","put","current","providedIn","EditComponent","blogService","location","route","router","paramMap","subscribe","getPost","setCurrentDraft","navigateByUrl","isDraftNew","body","modified","Date","created","newPost","fetchPosts","posts","length","updatePost","navigate","deletePost","snapshot","getCurrentDraft","ListComponent","selectedPost","Math","max","onNew","PreviewComponent","htmlRenderer","parser","parsedBody","render","parsedTitle","edit","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { EditComponent } from './edit/edit.component';\r\nimport { PreviewComponent } from './preview/preview.component';\r\n\r\nconst routes: Routes = [\r\n    { path: 'edit/:id', component: EditComponent }\r\n    ,{ path: 'preview/:id', component: PreviewComponent}\r\n];\r\n\r\n\r\n@NgModule({\r\n\r\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'angular-blog';\r\n}\r\n","<div class = \"split left\">\r\n\r\n\t\t<app-list></app-list>\r\n\t\r\n</div>\r\n<div class = \"split right\">\r\n\t\t<router-outlet></router-outlet>\r\n\t\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { EditComponent } from './edit/edit.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { PreviewComponent } from './preview/preview.component'; \r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ListComponent,\r\n    EditComponent,\r\n    PreviewComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError,of } from 'rxjs';\r\n\r\nexport class Post {\r\n  postid: number;\r\n  created: Date;\r\n  modified: Date;\r\n  title: string;\r\n  body: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BlogService {\r\n\tprivate current: Post;\r\n\tpublic isDraftNew:boolean;\r\n\t//posts is the current posts in the list\r\n\tpublic posts: Post[];\r\n\tprivate handleError(err: any): Promise<any>{\r\n\t\tconsole.log(err.message);\r\n\t\treturn Promise.reject(new Error(String(err.status)));\r\n\t}\r\n\r\n\tpublic currentUser: string;\r\n\r\n\tprivate parseJWT(token) \r\n\t{\r\n\t    let base64Url = token.split('.')[1];\r\n\t    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n\t    let obj = JSON.parse(atob(base64));\r\n\t    return obj.usr;\r\n\t}\r\n\r\n  constructor(private http: HttpClient) { \r\n  \tif (!document.cookie){\r\n  \t\talert(\"Please login.\");\r\n  \t\treturn;\r\n  \t} else{\r\n  \t\tthis.currentUser = this.parseJWT(document.cookie)\r\n  \t}\r\n\r\n  }\r\n\r\n\r\n\tfetchPosts(username: string): Promise<Post[]>{\r\n\t\tlet url = `/api/${username}`;\r\n\t\treturn this.http.get<Post []>(url).toPromise()\r\n\t\t.catch(this.handleError);\r\n\t\t\r\n\t}\r\n\r\n\tgetPost(username: string, postid: number): Promise<Post> {\r\n\t\tlet url = `/api/${username}/${postid}`;\r\n\t\treturn this.http.get<Post>(url).toPromise()\r\n\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tnewPost(username: string, post: Post): Promise<void> {\r\n\t\tlet postid = post.postid;\r\n\t\tlet url = `/api/${username}/${postid}`;\r\n\t\treturn this.http.post<Post>(url, post).toPromise()\r\n\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tupdatePost(username: string, post: Post): Promise<void> {\r\n\t\tlet postid = post.postid;\r\n\t\tlet url = `/api/${username}/${postid}`;\r\n\t\treturn this.http.put<Post>(url, post).toPromise()\r\n\t\t.catch(this.handleError);\t\t\r\n\t}\r\n\r\n\tdeletePost(username: string, postid: number): Promise<void> {\r\n\t\tlet url = `/api/${username}/${postid}`;\r\n\t\treturn this.http.delete(url).toPromise()\r\n\t\t.catch(this.handleError);\t\t\r\n\t}\r\n\r\n\r\n\tsetCurrentDraft(post: Post): void{\r\n\t\tthis.current = post;\r\n\t}\r\n\r\n\tgetCurrentDraft(): Post{\r\n\t\treturn this.current;\r\n\t}\r\n\r\n/*\r\n\tfetchPosts(username: string): Promise<Post[]>{\r\n\t\treturn new Promise<Post []>( (resolve, reject) =>{\r\n\t\t\tfetch(`api/${username}`).then(\r\n\t\t\t\tfunction(response){\r\n\t\t\t\t\tif (response.status != 200){\r\n\t\t\t\t\t\treject(new Error(String(response.status)));\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tlet posts: Post[] = [];\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet resposts = JSON.parse(response.text());\r\n\t\t\t\t\t\tfor (let post of resposts){\r\n\t\t\t\t\t\t\tlet newpost: Post = {\r\n\t\t\t\t\t\t\t\tpostid: post.postid,\r\n\t\t\t\t\t\t\t\tcreated: post.created,\r\n\t\t\t\t\t\t\t\tmodified: post.modified,\r\n\t\t\t\t\t\t\t\ttitle: post.title,\r\n\t\t\t\t\t\t\t\tbody: post.body\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tposts.push(newpost);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresolve(posts);\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n*/\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Post, BlogService } from '../blog.service';\r\nimport { ActivatedRoute,Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { EventEmitter, Output } from '@angular/core';\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html',\r\n  styleUrls: ['./edit.component.css']\r\n})\r\n\r\n\r\nexport class EditComponent implements OnInit {\r\n\tpost: Post ;\r\n\tbody: string;\r\n\ttitle: string;\r\n\tisNew: boolean;\r\n\t//@Output() refresh = new EventEmitter<number>();\r\n\r\n\tconstructor(private blogService: BlogService, private location: Location, \r\n\t private route: ActivatedRoute,private router:Router) { \r\n\t\tthis.route.paramMap.subscribe(() => this.getPost());}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.getPost();\r\n\t}\r\n\tpreview():void{\r\n\t\tthis.blogService.setCurrentDraft(this.post);\r\n\t\tlet url = `/preview/${this.post.postid}`;\r\n    \tthis.router.navigateByUrl(url);\r\n\t\t\r\n\t}\r\n\tsave():void{\r\n\t\tconsole.log(\"new flag: \"+this.blogService.isDraftNew);\r\n\t\tconsole.log(\"post title: \"+this.post.title);\r\n\t\tconsole.log(\"post body: \"+this.post.body);\r\n\t\tconsole.log(\"record title: \"+this.title);\r\n\t\tconsole.log(\"record body: \"+this.body);\r\n\t\t/*if(!this.blogService.isDraftNew && this.post.title == this.title &&this.post.body== this.body){\r\n\t\t\tconsole.log(this.post.created);\r\n\t\t\tconsole.log(this.post.modified);\r\n\t\t\treturn;\r\n\t\t}*/\r\n\t\tif(this.blogService.isDraftNew){\r\n\t\t\t//new post\r\n\t\t\tthis.post.modified = new Date();\r\n\t\t\tthis.post.created = new Date();\r\n\t\t\tthis.blogService.newPost(this.blogService.currentUser,this.post).then(\r\n\t\t\t\t()=>{\r\n\t\t\t\t  \tthis.blogService.fetchPosts(this.blogService.currentUser)\r\n  \t\t\t\t\t.then(posts=>{\r\n  \t\t\t\t\t\tthis.blogService.posts = posts;\r\n  \t\t\t\t\t\tconsole.log(\"post size is: \"+this.blogService.posts.length);\r\n  \t\t\t\t\t\tconsole.log(\"made new post\");}\r\n  \t\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// changed old post\r\n\t\t\tthis.post.modified = new Date();\r\n\t\t\tconsole.log(this.post.created);\r\n\t\t\tconsole.log(this.post.modified);\r\n\t\t\tthis.blogService.updatePost(this.blogService.currentUser,this.post).\r\n\t\t\tthen(()=>{\r\n\r\n\t\t\t\tthis.blogService.fetchPosts(this.blogService.currentUser)\r\n  \t\t\t\t\t.then(posts=>{\r\n  \t\t\t\t\t\tthis.blogService.posts = posts;\r\n  \t\t\t\t\t\tconsole.log(posts[0].created);\r\n  \t\t\t\t\t\tconsole.log(posts[0].modified);\r\n  \t\t\t\t// \t\tconsole.log(\"posts size is: \"+this.blogService.posts.length);\r\n\t\t\t\t\t\t// console.log(\"updated the post\");\r\n\t\t\t\t\t})\r\n\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t\tthis.blogService.isDraftNew = false;\r\n\r\n\t}\r\n\r\n\tdelete():void{\r\n\t\tif(this.blogService.isDraftNew){\r\n\t\t\tthis.router.navigate(['/']);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.blogService.deletePost(this.blogService.currentUser,this.post.postid).\r\n\t\tthen(()=>{\r\n\t\t\tthis.blogService.fetchPosts(this.blogService.currentUser)\r\n\t\t\t\t.then(posts=>{\r\n\t\t\t\t\tthis.blogService.posts = posts;\r\n\t\t\t\t\tthis.router.navigate(['/']);\r\n\t\t\t})\r\n\t\t\t}).catch(err=>console.log(err));\r\n\t}\r\n\r\n\t/*\r\n\tgoBack(): void {\r\n\t  this.location.back();\r\n\t}\r\n*/\r\n\tgetPost(): void {\r\n\t\t\r\n\t\tconst postid = +this.route.snapshot.paramMap.get('id');\r\n\t\tconsole.log(\"id in url: \"+postid);\r\n\t\tconsole.log(\"draft: \"+this.blogService.getCurrentDraft());\r\n\t\tthis.post = this.blogService.getCurrentDraft();\r\n\t\tif(!this.post|| this.post.postid!=postid){\r\n\t\t\t//direct url acess from outside\r\n\t\t\r\n\t\t  \tthis.blogService.getPost(this.blogService.currentUser,postid)\r\n\t\t    .then(post => {\r\n\t\t    \tthis.post = post;\r\n\t\t    \tthis.title = this.post.title;\r\n\t\t\t\tthis.body = this.post.body;\r\n\t\t\t\tthis.blogService.isDraftNew = false;\r\n\t\t\t\t}\r\n\t\t    ).\r\n\t\t    catch(err=>\r\n\t\t    \t{console.log(err);\r\n\t\t    \talert(\"wrong postid\");\r\n\t\t    \tthis.router.navigate(['/']);\r\n\t\t    \t}\r\n\t\t    )\r\n\t\t}\r\n\t\telse{\r\n\t\t\t//from new or clicking\r\n\t\t\tthis.title = this.post.title;\r\n\t\t\tthis.body = this.post.body;\r\n\t\t}\r\n\r\n\r\n\t}\r\n}\r\n","<div *ngIf=\"post\">\n\t<h2> Postid:{{post.postid}} Edit Page</h2>\n\n\t<div>\n\t  <label>title:\n\t    <input type = \"text\" [(ngModel)]=\"post.title\" placeholder=\"title\"/>\n\t  </label>\n\t</div>\n\t<div>\n\t  <label>body:\n\t    <input type = \"textarea\" [(ngModel)]=\"post.body\" placeholder=\"body\"/>\n\t  </label>\n\t</div>\n\t<div>Created:{{post.created|date:\"medium\"}}</div>\n\t<div>Modified:{{post.modified|date:\"medium\"}}</div>\n\n<button (click)=\"preview()\">Preview</button>\n<button (click)=\"save()\">Save</button>\n<button (click)=\"delete()\">Delete</button>\n\n\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { Post, BlogService } from '../blog.service';\r\nimport { ActivatedRoute,Router } from '@angular/router';\r\nimport { Input } from '@angular/core';\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.css']\r\n})\r\nexport class ListComponent implements OnInit {\r\n\tselectedPost: Post;\r\n\r\n\t//posts: Post[];\r\n\r\n\tusername: String;\r\n\r\n  /*@Input() refresh():void{\r\n    console.log(\"refreshing\");\r\n    this.getPost();\r\n  }*/\r\n\r\n  constructor(public blogService: BlogService, private router: Router,\r\n    private route: ActivatedRoute) { \r\n    //this.route.paramMap.subscribe(() => this.getPost());\r\n  }\r\n\r\n  \r\n\r\n  ngOnInit(): void {\r\n  \tthis.getPost();\r\n\r\n  }\r\n\r\n  getPost(): void {\r\n  \tthis.blogService.fetchPosts(this.blogService.currentUser)\r\n      .then(\r\n        //posts => this.posts = posts\r\n          posts=>this.blogService.posts = posts\r\n        );\r\n  }\r\n\r\n  onSelect(post: Post): void{\r\n  \tthis.blogService.setCurrentDraft(post);\r\n    this.blogService.isDraftNew = false;\r\n  \tthis.selectedPost = post;\r\n    let url = `/edit/${post.postid}`;\r\n    this.router.navigateByUrl(url);\r\n  }\r\n\r\n  onNew(): void{\r\n  \tlet postid: number = -1;\r\n    for (let post of this.blogService.posts){\r\n  \t\tpostid = Math.max(post.postid, postid);\r\n  \t}\r\n  \tlet newPost: Post = {\r\n  \t\tpostid: postid+1,\r\n  \t\tcreated: new Date(),\r\n  \t\tmodified: new Date(),\r\n  \t\ttitle:\"\",\r\n  \t\tbody:\"\"\r\n  \t}\r\n  \tthis.blogService.setCurrentDraft(newPost);\r\n    this.blogService.isDraftNew = true;\r\n    let url = `/edit/${newPost.postid}`;\r\n    this.router.navigateByUrl(url);\r\n\r\n\r\n  }\r\n\r\n}\r\n","<div class = \"blogs\">\r\n\t\t<br>\r\n\t<button (click)=\"onNew()\">new</button>\r\n\t<br>\r\n\t<h2> Blog List </h2>\r\n\t<br>\r\n\t<ul >\r\n\t\t<li *ngFor=\"let post of this.blogService.posts\"\r\n\t\t\t(click)=\"onSelect(post)\" class=\"item\">\r\n\t\t\t<div>{{post.created|date:\"medium\"}}</div>\r\n\t\t\t<div> {{post.title}}</div>\r\n\r\n\t\t</li>\r\n\t</ul>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Post, BlogService } from '../blog.service';\r\nimport { ActivatedRoute,Router } from '@angular/router';\r\nimport { EventEmitter, Output } from '@angular/core';\r\nimport { Parser, HtmlRenderer } from 'commonmark';\r\n\r\n@Component({\r\n  selector: 'app-preview',\r\n  templateUrl: './preview.component.html',\r\n  styleUrls: ['./preview.component.css']\r\n})\r\nexport class PreviewComponent implements OnInit {\r\n\tprivate post: Post;\r\n\tprivate body: string;\r\n\tprivate title: string;\r\n\tparsedBody: string;\r\n\tparsedTitle: string;\r\n\r\n  constructor(private blogService: BlogService, private route: ActivatedRoute,\r\n  \tprivate router:Router) {\r\n\tthis.route.paramMap.subscribe(() => this.getPost());}\r\n\r\n  ngOnInit(): void {\r\n  \tthis.getPost();\r\n  }\r\n\r\n  edit(): void{\r\n  \tlet url=`edit/${this.post.postid}`;\r\n  \tthis.router.navigateByUrl(url);\r\n  }\r\n\r\n  getPost(): void {\r\n  \tconst postid = +this.route.snapshot.paramMap.get('id');\r\n\tconsole.log(\"id in url: \"+postid);\r\n\tconsole.log(\"draft: \"+this.blogService.getCurrentDraft());\r\n\tthis.post = this.blogService.getCurrentDraft();\r\n\r\n\tlet htmlRenderer = new HtmlRenderer();\r\n\tlet parser = new Parser();\r\n\r\n\tif(!this.post|| this.post.postid!=postid){\r\n\t\t//direct url acess from outside\r\n\t\r\n\t  \tthis.blogService.getPost(this.blogService.currentUser,postid)\r\n\t    .then(post => {\r\n\t    \tthis.post = post;\r\n\t    \tthis.title = this.post.title;\r\n\t\t\tthis.body = this.post.body;\r\n\t\t\tthis.parsedBody = htmlRenderer.render(parser.parse(this.body));\r\n\t\t\tthis.parsedTitle = htmlRenderer.render(parser.parse(this.title));\r\n\t\t\t}\r\n\t    ).\r\n\t    catch(err=>\r\n\t    \t{console.log(err);\r\n\t    \talert(\"wrong postid\");\r\n\t    \tthis.router.navigate(['/']);\r\n\t    \t}\r\n\t    )\r\n\t}\r\n\telse{\r\n\t\t//from new or clicking\r\n\t\t\r\n\t\tthis.title = this.post.title;\r\n\t\tthis.body = this.post.body;\r\n\t\tthis.parsedBody = htmlRenderer.render(parser.parse(this.body));\r\n\t\tthis.parsedTitle = htmlRenderer.render(parser.parse(this.title));\r\n\r\n\t}\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n","<button (click)=\"edit()\">Edit</button>\r\n<br>\r\n<div class=title [innerHTML]=\"parsedTitle\"></div>\r\n<br>\r\n<div class=body [innerHTML]=\"parsedBody\"></div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}